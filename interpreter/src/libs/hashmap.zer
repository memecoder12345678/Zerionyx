# libs.hashmap

defun hashmap(l1, l2, df)
    if type(l1) != list do
        panic("First argument of 'hashmap' must be a list", "T")
    done
    if type(l2) != list do
        panic("Second argument of 'hashmap' must be a list", "T")
    done
    if len(l1) < len(l2) do
        panic("Length of 'l1' must be >= length of 'l2'", "RT")
    done
    for i = 0 to len(l1) do
        let key = l1>i
        if index_of(l1, key) != i do
            panic("Duplicate key detected in 'l1'", "RT")
        done
    done
    let r = []
    let zipped = zip_longest(l1, l2)
    for i = 0 to len(zipped) do
        let pair = zipped>i
        let k = pair>0
        let v = pair>1
        if v == none do
            v = df
        done
        append(r, [k, v])
    done
    return r
done

defun get_hashmap_value(h, k, df)
    if type(h) != list do
        panic("First argument of 'get_hashmap_value' must be a list", "T")
    done
    for i = 0 to len(h) do
        let pair = h>i
        if pair>0 == k do
            return pair>1
        done
    done
    return df
done

defun set_hashmap_value(h, k, v)
    if type(h) != list do
        panic("First argument of 'set_hashmap_value' must be a list", "T")
    done
    for i = 0 to len(h) do
        if h>i>0 == k do
            change_value(h, i, [k, v])
            return
        done
    done
    append(h, [k, v])
done

defun has(h, k)
    if type(h) != list do
        panic("First argument of 'has' must be a list", "T")
    done
    for i = 0 to len(h) do
        if h>i>0 == k do
            return true
        done
    done
    return false
done

defun del_key(h, k)
    if type(h) != list do
        panic("First argument of 'del_key' must be a list", "T")
    done
    for i = 0 to len(h) do
        if h>i>0 == k do
            pop(h, i)
            return
        done
    done
done

defun get_hashmap_keys(h)
    if type(h) != list do
        panic("First argument of 'get_hashmap_keys' must be a list", "T")
    done
    let r = []
    for i = 0 to len(h) do
        append(r, h>i>0)
    done
    return r
done

defun get_hashmap_values(h)
    if type(h) != list do
        panic("First argument of 'get_hashmap_values' must be a list", "T")
    done
    let r = []
    for i = 0 to len(h) do
        append(r, h>i>1)
    done
    return r
done

defun get_hashmap_items(h)
    if type(h) != list do
        panic("First argument of 'get_hashmap_items' must be a list", "T")
    done
    return h
done

defun clear_hashmap(h)
    if type(h) != list do
        panic("First argument of 'clear_hashmap' must be a list", "T")
    done
    for i = 0 to len(h) do
        pop(h, i)
    done
done
