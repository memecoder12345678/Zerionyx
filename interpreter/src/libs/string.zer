# libs.string

load "libs.math"

digits = "0123456789"
ascii_lowercase = "abcdefghijklmnopqrstuvwxyz"
ascii_uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
ascii_letters = ascii_lowercase + ascii_uppercase
list_digits = split_fp(digits, "")
list_ascii_lowercase = split_fp(ascii_lowercase, "")
list_ascii_uppercase = split_fp(ascii_uppercase, "")
list_ascii_letters = split_fp(ascii_letters, "")

defun split(s, s_)
    return split_fp(s, s_)
done

defun strip(s, s_)
    return strip_fp(s, s_)
done 

defun join(s, l)
    return join_fp(s, l)
done

defun replace(s, v, w)
    return replace_fp(s, v, w)
done

defun to_upper(s)
    return to_upper_fp(s)
done

defun to_lower(s)
    return to_lower_fp(s)
done

defun ord(s)
    return to_str(ord_fp(s))
done

defun chr(n)
    return to_str(chr_fp(n))
done

defun is_digit(s)
    if not is_str(s) do
        return false
    done
    if len(s) != 1 do
        return false
    done
    for i = 0 to len(list_digits) do
        if s == list_digits.i do
            return true
        done
    done
    return false
done

defun is_ascii_lowercase(s)
    if not is_str(s) do
        return false
    done
    if len(s) != 1 do
        return false
    done
    for i = 0 to len(list_ascii_lowercase) do
        if s == list_ascii_lowercase.i do
            return true
        done
    done
    return false
done

defun is_ascii_uppercase(s)
    if not is_str(s) do
        return false
    done
    if len(s) != 1 do
        return false
    done
    for i = 0 to len(list_ascii_uppercase) do
        if s == list_ascii_uppercase.i do
            return true
        done
    done
    return false
done

defun is_ascii_letter(s)
    if not is_str(s) do
        return false
    done
    if len(s) != 1 do
        return false
    done
    for i = 0 to len(list_ascii_letter) do
        if s == list_ascii_letter.i do
            return true
        done
    done
    return false
done

defun is_space(s)
    if not is_str(s) do
        return false
    done
    if len(s) != 1 do
        return false
    done
    return (s == " " or s == "\t" or s == "\n" or s == "\r" or s == "\v" or s == "\f")
done

defun find(s, v)
    return find_fp(s, v)
done

defun find_all(s, v)
    result = []
    start = 0
    while true do
        sub = slice(s, start, none, none)
        idx = find(sub, v)
        if is_none(idx) do
            break
        done
        append(result, start + idx)
        start = start + idx + 1
    done
    return result
done

defun startswith(s, v)
    if not is_str(s) do
        panic("First argument of 'startswith' must be a string", "T")
    done
    if not is_str(v) do
        panic("Second argument of 'startswith' must be a string", "T") 
    done
    if len(v) == 0 or len(s) == 0 do
        return false
    done
    if len(v) > len(s) do
        return false
    done
    prefix = slice(s, 0, len(v), none)
    return prefix == v
done

defun endswith(s, v)
    if not is_str(s) do
        panic("First argument of 'endswith' must be a string", "T")
    done
    if not is_str(v) do
        panic("Second argument of 'endswith' must be a string", "T")
    done
    if len(v) == 0 or len(s) == 0 do
        return false
    done
    if len(v) > len(s) do
        return false
    done
    suffix = slice(s, len(s) - len(v), none, none) 
    return suffix == v
done
