{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Zerionyx",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#decorators" },
        { "include": "#namespace" },
        { "include": "#keywords" },
        { "include": "#control-flow" },
        { "include": "#for-in-loop" },
        { "include": "#for-to-loop" },
        { "include": "#function-definition" },
        { "include": "#function-call" },
        { "include": "#call-member-access" },
        { "include": "#member-access" },
        { "include": "#builtins" },
        { "include": "#literals" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#hashmap" },
        { "include": "#list" },
        { "include": "#identifiers" },
        { "include": "#errors" }
    ],
    "repository": {
        "builtins": {
            "patterns": [
                {
                    "name": "storage.type.zerionyx",
                    "match": "\\b(list|str|int|float|bool|func|hashmap|thread|bytes|cfloat|py_obj|channel_type|none_type|thread_pool_type|future_type)\\b"
                },
                {
                    "name": "constant.language.zerionyx",
                    "match": "\\b(is_main)\\b"
                },
                {
                    "name": "support.function.builtin.zerionyx",
                    "match": "\\b(append|is_panic|clear|extend|input|get_password|insert|is_func|is_list|is_py_obj|is_none|is_num|is_str|is_bool|is_thread|is_thread_pool|is_future|is_namespace|keys|values|items|has|get|del|len|panic|pop|print|println|to_float|to_int|to_str|to_cfloat|to_bytes|type|pyexec|slice|is_nan|is_channel|is_cfloat)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.zerionyx",
                    "match": "#.*$"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.zerionyx",
                    "match": "[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "for-to-loop": {
            "patterns": [
                {
                    "begin": "\\b(for)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)\\s*([^\\s]+)\\s+(to)\\s+([^\\s]+)(?:\\s+(step)\\s+([^\\s]+))?\\s+(do)\\b",
                    "end": "\\b(done)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.zerionyx" },
                        "2": { "name": "variable.other.zerionyx" },
                        "3": { "name": "keyword.operator.zerionyx" },
                        "5": { "name": "keyword.control.zerionyx" },
                        "7": { "name": "keyword.control.zerionyx" },
                        "9": { "name": "keyword.control.zerionyx" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "patterns": [ { "include": "$self" } ]
                }
            ]
        },
        "control-flow": {
            "patterns": [
                {
                    "begin": "\\b(if)\\b",
                    "end": "\\b(done)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "patterns": [ { "include": "$self" } ]
                },
                {
                    "begin": "\\b(for)\\b",
                    "end": "\\b(done)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "patterns": [ { "include": "$self" } ]
                },
                {
                    "begin": "\\b(while)\\b",
                    "end": "\\b(done)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.zerionyx" }
                    },
                    "patterns": [ { "include": "$self" } ]
                }
            ]
        },
        "decorators": {
            "patterns": [
                {
                    "name": "entity.name.function.zerionyx",
                    "match": "(&)([a-zA-Z_][a-zA-Z0-9_]*)"
                }
            ]
        },
        "function-call": {
            "patterns": [
                {
                    "name": "meta.function-call.zerionyx",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
                    "captures": {
                        "1": { "name": "entity.name.function.zerionyx" }

                    }
                }
            ]
        },
        "function-definition": {
            "begin": "\\b(defun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
            "end": "\\b(done)\\b",
            "beginCaptures": {
                "1": { "name": "keyword.control.zerionyx" },
                "2": { "name": "entity.name.function.zerionyx" }
            },
            "endCaptures": {
                "1": { "name": "keyword.control.zerionyx" }
            },
            "patterns": [
                {
                    "match": "->",
                    "name": "keyword.operator.zerionyx"
                },
                { "include": "$self" }
            ]
        },
        "for-in-loop": {
            "begin": "\\b(for)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+(in)\\b",
            "end": "\\b(done)\\b",
            "beginCaptures": {
                "1": { "name": "keyword.control.zerionyx" },
                "2": { "name": "variable.other.zerionyx" },
                "3": { "name": "keyword.control.zerionyx" }
            },
            "endCaptures": {
                "1": { "name": "keyword.control.zerionyx" }
            },
            "patterns": [ { "include": "$self" } ]
        },
        "hashmap": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.structure.dictionary.key.zerionyx",
            "patterns": [
                {
                    "match": ":",
                    "name": "keyword.operator.zerionyx"
                },
                { "include": "$self" }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.zerionyx",
                    "match": "\\b(using parent)\\b"
                },
                {
                    "name": "keyword.control.zerionyx",
                    "match": "\\b(if|elif|for|while|in|to|step|do|done|return|break|continue|defun|load|as|else|namespace|using|and|or|not)\\b"
                }
            ]
        },
        "list": {
            "begin": "\\[",
            "end": "\\]",
            "name": "markup.list",
            "patterns": [ { "include": "$self" } ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "constant.language.zerionyx",
                    "match": "\\b(true|false|none|inf|neg_inf|nan)\\b"
                }
            ]
        },
		"call-member-access": {
			"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
			"captures": {
				"1": { "name": "entity.name.class.zerionyx" },
				"2": { "name": "entity.name.function.zerionyx" }
			}
		},
		"member-access": {
			"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": { "name": "entity.name.class.zerionyx" },
                "2": { "name": "variable.other.zerionyx" }
			}
		},
        "namespace": {
            "begin": "\\b(namespace)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "end": "\\b(done)\\b",
            "beginCaptures": {
                "1": { "name": "keyword.control.zerionyx" },
                "2": { "name": "entity.name.class.zerionyx" }
            },
            "endCaptures": {
                "1": { "name": "keyword.control.zerionyx" }
            },
            "patterns": [
                {
                    "match": "(?<=\\bnamespace\\s+)([a-zA-Z_][a-zA-Z0-9_]*)",
                    "name": "entity.name.class.zerionyx"
                },
                { "include": "$self" }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.zerionyx",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.numeric.zerionyx",
                    "match": "\\b\\d+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.zerionyx",
                    "match": "(=|\\+=|-=|\\*=|/=|//=|%=|\\^=|:|->|\\$)"
                },
                {
                    "name": "keyword.operator.zerionyx",
                    "match": "(==|<|>|<=|>=|!=)"
                },
                {
                    "name": "keyword.operator.zerionyx",
                    "match": "(\\+|\\-|\\*|/|//|%|\\^)"
                },
                {
                    "name": "keyword.operator.zerionyx",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "keyword.operator.zerionyx",
                    "match": "\\."
                }
            ]
        },
        "errors": {
            "patterns": [
                {
                    "name": "invalid.illegal.zerionyx",
                    "match": "[?~`@|]"
                },
                {
                    "name": "invalid.illegal.zerionyx",
                    "match": "(?<![\\w\\d\\]\\)])(\\+|\\-|\\*|/|%|\\^|==|!=|<=|>=|<|>)\\s*$"
                },
                {
                    "name": "invalid.illegal.zerionyx",
                    "match": "\\b\\d*\\.\\d+\\.\\d[\\d.]*\\b"
                },
                {
                    "name": "invalid.illegal.zerionyx",
                    "match": "\\b[0-9]+[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "invalid.illegal.zerionyx",
                    "match": "^\\s*[\\)\\]\\}]"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.zerionyx",
                    "begin": "\"",
                    "end": "\"",
                    "beginCaptures": {
                        "0": { "name": "markup.punctuation.quote.beginning.zerionyx" }
                    },
                    "endCaptures": {
                        "0": { "name": "markup.punctuation.quote.beginning.zerionyx" }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.zerionyx",
                            "match": "\\\\(\\\\|\"|n|t|r|f|b|v|a|0|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.zerionyx",
                    "begin": "'",
                    "end": "'",
                    "beginCaptures": {
                        "0": { "name": "markup.punctuation.quote.beginning.zerionyx" }
                    },
                    "endCaptures": {
                        "0": { "name": "markup.punctuation.quote.beginning.zerionyx" }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.zerionyx",
                            "match": "\\\\(\\\\|'|n|t|r|f|b|v|a|0|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.zerionyx"
}
